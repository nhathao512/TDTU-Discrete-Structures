# -*- coding: utf-8 -*-
"""Lab01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q8WnD6AWKYASbJHF3lyT6mSFXiQfjR2_
"""

#Exercise 1
a = 15 * 2 + 7 * 8
b = 20 - 15 + 15 * 2
c = 20 + 30 - 3 * 15 + 5 * 5**2
d = (4/6 + 2/6) / (5/2 + 1/2)
e = 14/2 + 7
f = (5 * 2) / (5 - 20 * 3**2 + 30)

print(a)
print(b)
print(c)
print(d)
print(e)
print(f)

#Exercise 2
a = 15 * 2 + 7 * 8
b = 20 - 15 + 15 * 2
c = 20 + 30 - 3 * 15 + 5 * 5**2
d = (4/6 + 2/6) / (5/2 + 1/2)
e = 14/2 + 7
f = (5 * 2) / (5 - 20 * 3**2 + 30)

print('15 * 2 + 7 * 8 =', a)
print('20 - 15 + 15 * 2 =', b)
print('20 + 30 - 3 * 15 + 5 * 5**2 =', c)
print('(4/6 + 2/6) / (5/2 + 1/2) =', d)
print('14/2 + 7 =', e)
print('(5*2) / (5-20*3**2+30) =', f)

#Exercise 3
def sumN(n):
    S = 0
    if n >= 0:
      for i in range(n+1):
          S = S + i
      return S
    else:
      for i in range(n, 0):
        S = S + i
      return S
print(sumN(2))

#Execrise 4
from re import A
#a
A = input("Enter string: ")
B = A.split()
C = "".join(B)
print("a :" + C)
#b
C = "_".join(B)
print("b :" + C)

#Exercise 5
def calculate(input):
    str1, operators, str2 = input.split()
    a = int(str1)
    b = int(str2)

    if operators == '+':
        result = a + b
    elif operators == '-':
        result = a - b
    elif operators == '*':
        result = a * b
    elif operators == '/':
        result = a / b
    elif operators == '%':
        result = a % b
    elif operators == '^':
        result = a ** b
    else:
        result = "Invalid operator"

    return result

print(calculate("1 + 2"))
print(calculate("2 * 3"))

#Exercise 6
def calculate(input):
    str1, operators, str2 = input.split()
    a = int(str1)
    b = int(str2)

    operations = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '/': lambda x, y: x / y,
        '%': lambda x, y: x % y,
        '^': lambda x, y: x ** y
    }

    if operators not in operations:
        return "Invalid operator"

    function = operations[operators]
    return function(a, b)

print(calculate("1 + 2"))
print(calculate("2 * 3"))

#Exercise 7
def mSum(A, B):
  m = len(A)
  n = len(A[0])

  if len(B) != m or len(B[0]) != n:
      return "Matrix dimension error"

  C = [[0 for j in range(n)] for i in range(m)]

  for i in range(m):
      for j in range(n):
          C[i][j] = A[i][j] + B[i][j]

  return C

A = [[5, 7],
     [3, 5]]
B = [[1, 3],
     [3, 6]]

print(mSum(A, B))

#Exercise 8
def mProd(A, B):
  m = len(A)
  n = len(A[0])
  p = len(B[0])

  if len(B) != n:
      return "Matrix dimension error"

  C = [[0 for j in range(p)] for i in range(m)]

  for i in range(m):
      for j in range(p):
          for k in range(n):
              C[i][j] += A[i][k] * B[k][j]

  return C

A = [[5, 7],
     [3, 5]]
B = [[1, 3],
     [3, 6]]

print(mProd(A, B))

#Exercise 9
def ithCombine(p, q):
    return "if " + p + ", then " + q

def panqCombine(p, q):
    return p + " and not " + q

def npoqCombine(p, q):
    return "not " + p + ", or " + q

p = "it sunny"
q = "I go camping"

# if it sunny, then I go camping
print('(a)', ithCombine(p, q))

# it sunny and not I go camping
print('(b)', panqCombine(p, q))

# not it sunny, or I go camping
print('(c)', npoqCombine(p, q))