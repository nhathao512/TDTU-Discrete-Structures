# -*- coding: utf-8 -*-
"""Lab02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1scYVrKbnVMCL_aT7xBV4Jer0FaYNfTuO
"""

#Exercise 2
#a
truths=[[1,1],[1,0],[0,1],[0,0]]

def implication(p, q):
    if p == 1 and q == 0:
        return False
    return True
print('a)')
print("A \t B \t A -> B")
print("-------------------------")
for item in truths:
    if item[0]==1:
        a=True
    else:
        a=False
    if item[1]==1:
        b=True
    else:
        b=False
    print(a,"\t",b,"\t", implication(a, b))

#b
print("\nb)")
print("A \t B \t A and B")
print("-------------------------")
for item in truths:
    if item[0]==1:
        a=True
    else:
        a=False
    if item[1]==1:
        b=True
    else:
        b=False
    print(a,"\t",b,"\t", a and b)

#c
print("\nc)")
print("A \t B \t A or B")
print("-------------------------")
for item in truths:
    if item[0]==1:
        a=True
    else:
        a=False
    if item[1]==1:
        b=True
    else:
        b=False
    print(a,"\t",b,"\t", a or b)

#d
def xor(p, q):
  if (p and not q) or (not p and q):
    return True
  else:
    return False

print("\nd)")
print("A \t B \t A xor B")
print("-------------------------")
for item in truths:
    if item[0]==1:
        a=True
    else:
        a=False
    if item[1]==1:
        b=True
    else:
        b=False
    print(a,"\t",b,"\t", xor(a, b))

#e
print("\ne)")
print("A \t B \t not B")
print("-------------------------")
for item in truths:
    if item[0]==1:
        a=True
    else:
        a=False
    if item[1]==1:
        b=True
    else:
        b=False
    print(a,"\t",b,"\t", not b)

#f
def Equivalent(p, q):
  if p and q:
    return True
  elif not p and not q:
    return True
  else:
    return False

print("\nf)")
print("A \t B \t A Equivalent B")
print("-------------------------")
for item in truths:
    if item[0]==1:
        a=True
    else:
        a=False
    if item[1]==1:
        b=True
    else:
        b=False
    print(a,"\t",b,"\t", Equivalent(a, b))

#Exercise 3
from itertools import product
def implies(p, q):
    if p and not q:
        return False
    else:
        return True

variables = ['p','q','r']

print("p \t q \t r \t p ∧ q \t p ∧ q -> r \t r -> p ∧ q")

for vals in product([True, False], repeat=len(variables)):
    p, q, r = vals
    p_and_q = p and q
    table1 = implies(p_and_q, r)
    table2 = implies(r, p_and_q)

    print(p,"\t" ,q, "\t" ,r, "\t" ,p_and_q, "\t" ,table1, "\t\t" ,table2)

#Exercise 4
from itertools import product

def implies(p, q):
    return (not p) or q

def equivalent(p, q):
    return p == q

v1 = ['p','q']
print("p \t q \t p ∨ q → p ∧ q \t p ∧ q → ~p ∨ ~q")

for a1 in product([True, False], repeat=len(v1)):
    p, q = a1
    statement1 = implies(p or q, p and q)
    statement2 = implies(p and q, (not p) or (not q))
    print(p, "\t" ,q, "\t" ,statement1, "\t\t" ,statement2)


print()
v2 = ['p','q','r']
print("p \t q \t r \t ~p ∨ (q ∧ r) → r")

for a2 in product([True, False], repeat=len(v2)):
    p, q, r = a2
    statement = implies((not p) or (q and r), r)

    print(p, "\t" ,q, "\t" ,r, "\t" ,statement)


print()
v3 = ['p','q','r']
print("p \t q \t r \t (p → q) ∧ (q → r)")

for a3 in product([True, False], repeat=len(v3)):
    p, q, r = a3
    statement1 = implies(p, q)
    statement2 = implies(q, r)
    statement = statement1 and statement2
    print(p, "\t" ,q, "\t" ,r, "\t" ,statement)


print()
v4 = ['p','q','r']

print("p \t q \t r \t p ∨ (q ∧ r) \t (p ∨ q) ∧ (p ∨ r)")

for a4 in product([True, False], repeat=len(v4)):
    p, q, r = a4
    statement1 = (p or (q and r))
    statement2 = ((p or q) and (p or r))
    print(p, "\t" ,q, "\t" ,r, "\t" ,statement1, "\t\t", statement2)


print()
v5 = ['p','q','r', 't']
print("p \t q \t r \t p ∨ q → ~r ∨ t")

for a5 in product([True, False], repeat=len(v5)):
    p, q, r, t = a5
    statement = implies((p or q), (not r) or t)
    print(p, "\t" ,q, "\t" ,r, "\t" ,statement)

print()
v6 = ['p','q', 'r', 't']
print("p \t q \t r \t p ∨ t → q → (r → t)")

for a6 in product([True, False], repeat=len(v6)):
    p, q, r, t = a6

    statement1 = implies((p or t), q)
    statement2 = implies(q, implies(r, t))
    result = implies(statement1, statement2)
    print(p, "\t" ,q, "\t" ,r, "\t" ,result)

print()
v7 = ['p','q','r', 't']
print("p \t q \t r \t (p ∨ (q ∧ r)) \t (((p ∨ q) ∧ (p ∨ r)) ∧ (t ∨ ~t))")

for a7 in product([True, False], repeat=len(v7)):
    p, q, r, t = a7

    statement1 = (p or (q and r))
    statement2 = ((p or q) and (p or r) and (t or not t))

    result = equivalent(statement1, statement2)

    print(p, "\t" ,q, "\t" ,r, "\t" ,statement1, "\t\t", result)

#Exercise 5
def check_equivalent(q, p):
    statement1 = not(not q and p) and (q or p)
    statement2 = q
    return statement1 == statement2

def implies(p,q):
    return (not p) or q
#1
p = True
neg_p = not p
print("p ≡ ~(~p):", end=" ")
if p == neg_p:
    print("Equivalent\n")
else:
    print("Inequivalent\n")

#2
print("~(~q ∧ p) ∧ (q ∨ p) ≡ q:", end=" ")
if check_equivalent(True, False):
    print("Equivalent\n")
else:
    print("Inequivalent\n")

#3
p, q = True, False
statement1 = not (p or q)
statement2 = (not p or not q)
print("~(p ∨ q) ≡ (~p ∨ ~q):", end=" ")
if statement1 == statement2:
    print("Equivalent\n")
else:
    print("Inequivalent\n")

#4
p, q, r = True, False, True
statement1 = implies((p or q), r)
statement2 = (implies(p,r)) and (implies(q,r))

print("(p ∨ q) -> r ≡ (p -> r) ∧ (q -> r):", end=" ")
if statement1 == statement2:
    print("Equivalent\n")
else:
    print("Inequivalent\n")

#5
p, q = True, False
statement1 = not (p and q)
statement2 = (not p and not q)

print("~(p ∧ q) ≡ (~p ∧ ~q):", end=" ")
if statement1 == statement2:
    print("Equivalent\n")
else:
    print("Inequivalent\n")

#6
p = True
q = False

statement1 = implies((p or (not q)), (not p))
statement2 = implies((p or (not q)), (not p))

print("(p ∨ ~q) -> ~p ≡ (p ∨ (~q)) -> ~p:", end=" ")
if statement1 == statement2:
    print("Equivalent\n")
else:
    print("Inequivalent\n")

#7
p = True
q = False

statement1 = not (p or q)
statement2 = (not q and not q)

print("~(p ∨ q) ≡ (~p ∧ ~q):", end=" ")
if statement1 == statement2:
    print("Equivalent\n")
else:
    print("Inequivalent\n")

#Exercise 6
#a
def a():
    p = True
    q = True
    r = True
    s = True
    if (not p or r) and (not p or q) and (q or s):
        if not (not r or s):
            print("VALID")
        else:
            print("INVALID")
    else:
        print("INVALID")
a()
#b
def b():
    p = True
    q = True
    r = True
    s = True
    t = True
    if (p <= (q <= r)) and (p or s) and (not t or q) and (not s):
        if not (not r or not t):
            print("VALID")
        else:
            print("INVALID")
    else:
        print("INVALID")
b()
#c
def c():
    p = True
    q = True
    r = True
    s = True
    if (p <= q) and (not r or s) and (p or r):
        if not (not q <= s):
            print("VALID")
        else:
            print("INVALID")
    else:
        print("INVALID")
c()
#d
def d():
    p = True
    q = True
    r = True
    s = True
    if p and (p <= r) and (p <= (q or not r)) and (not q or not s):
        if s:
            print("VALID")
        else:
            print("INVALID")
    else:
        print("INVALID")
d()