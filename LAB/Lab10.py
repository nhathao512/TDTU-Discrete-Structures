# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sGs9EAkHcrB1rVnGMrFbrNL6TeyT8jR5
"""

# #Exercise 2

import networkx as nx
import numpy as np
import matplotlib.pyplot as plt

# Graph a)
edges_a = [("B", "C", 5), ("B", "D", 3), ("A", "C", 3), ("C", "D", 1), ("D", "E", 2), ("A", "E", 1)]

graph_a = nx.Graph()

for edge in edges_a:
    graph_a.add_edge(edge[0], edge[1], weight=edge[2])

adj_matrix_a = nx.adjacency_matrix(graph_a, weight='weight').toarray()

plt.figure()
pos_a = nx.spring_layout(graph_a)
nx.draw_networkx(graph_a, pos=pos_a, with_labels=True, node_size=500, node_color='lightblue', font_size=12,
                 font_weight='bold', width=1.5, edge_color='gray')
edge_labels_a = nx.get_edge_attributes(graph_a, 'weight')
nx.draw_networkx_edge_labels(graph_a, pos=pos_a, edge_labels=edge_labels_a)
plt.title("Graph a)")
plt.show()


# Graph b)
edges_b = [("B", "C", 5), ("B", "D", 3), ("C", "D", 1), ("E", "C", 5), ("E", "D", 2), ("F", "D", 3), ("F", "E", 6),
           ("E", "A", 1), ("A", "F", 1)]

graph_b = nx.Graph()

for edge in edges_b:
    graph_b.add_edge(edge[0], edge[1], weight=edge[2])

adj_matrix_b = nx.adjacency_matrix(graph_b, weight='weight').toarray()

plt.figure()
pos_b = nx.spring_layout(graph_b)
nx.draw_networkx(graph_b, pos=pos_b, with_labels=True, node_size=500, node_color='lightblue', font_size=12,
                 font_weight='bold', width=1.5, edge_color='gray')
edge_labels_b = nx.get_edge_attributes(graph_b, 'weight')
nx.draw_networkx_edge_labels(graph_b, pos=pos_b, edge_labels=edge_labels_b)
plt.title("Graph b)")
plt.show()

print("Weighted Adjacency Matrix for Graph a):")
print(adj_matrix_a)
print("\nWeighted Adjacency Matrix for Graph b):")
print(adj_matrix_b)

#Exercise 3
import networkx as nx
import numpy as np
import matplotlib.pyplot as plt

edges_a = [("A","C",5), ("A","D",3), ("B","C",3), ("B","D",2), ("C","D",1), ("C","E",3), ("D","E",1), ("D","F",3), ("E","F",4)]

graph_a = nx.Graph()

for edge in edges_a:
    graph_a.add_edge(edge[0], edge[1], weight=edge[2])

adj_matrix_a = nx.adjacency_matrix(graph_a, weight='weight').toarray()

plt.figure()
pos_a = nx.spring_layout(graph_a)
nx.draw_networkx(graph_a, pos=pos_a, with_labels=True, node_size=500, node_color='lightblue', font_size=12, font_weight='bold', width=1.5, edge_color='gray')
edge_labels_a = nx.get_edge_attributes(graph_a, 'weight')
nx.draw_networkx_edge_labels(graph_a, pos=pos_a, edge_labels=edge_labels_a)
plt.title("Graph a)")
plt.show()


edges_b = [("A","C",2), ("A","D",3), ("A","E",3), ("B","C",3), ("B","D",2), ("C","D",2), ("C","E",8), ("C","F",6), ("D","F",5), ("E","F",3)]

graph_b = nx.Graph()

for edge in edges_b:
    graph_b.add_edge(edge[0], edge[1], weight=edge[2])

adj_matrix_b = nx.adjacency_matrix(graph_b, weight='weight').toarray()

plt.figure()
pos_b = nx.spring_layout(graph_b)
nx.draw_networkx(graph_b, pos=pos_b, with_labels=True, node_size=500, node_color='lightblue', font_size=12, font_weight='bold', width=1.5, edge_color='gray')
edge_labels_b = nx.get_edge_attributes(graph_b, 'weight')
nx.draw_networkx_edge_labels(graph_b, pos=pos_b, edge_labels=edge_labels_b)
plt.title("Graph b)")
plt.show()

print("Weighted Adjacency Matrix for Graph a):")
print(adj_matrix_a)
print("\nWeighted Adjacency Matrix for Graph b):")
print(adj_matrix_b)

#Exercise 4
def toLoE(A):
    n = len(A)
    edges = []
    for i in range(n):
        for j in range(i + 1, n):
            if A[i][j] != 0:
                edges.append((i, j, A[i][j]))
    return edges

A = [
    [0, 5, 3, 0, 0, 0],
    [5, 0, 1, 3, 3, 0],
    [3, 1, 0, 2, 1, 3],
    [0, 3, 2, 0, 0, 0],
    [0, 3, 1, 0, 0, 4],
    [0, 0, 3, 0, 4, 0]]

edges = toLoE(A)
print(edges)

#Exercise 5
import networkx as nx
import matplotlib.pyplot as plt

graph = nx.Graph()


graph.add_nodes_from(['Monkeys', 'Apes', 'Gorillas', 'Mice', 'Squirrels', 'Beavers',
                     'Crocodiles', 'Komodo dragons', 'Lizards', 'Coconut trees',
                     'Grasses', 'Oaks', 'Mushrooms', 'Molds', 'Yeasts',
                     'Primates', 'Rodents', 'Reptiles', 'Plants', 'Fungi',
                     'Mammals', 'Animals', 'Multicellular organisms', 'Unicellular organisms'])


graph.add_edges_from([('Monkeys', 'Primates'), ('Apes', 'Primates'), ('Gorillas', 'Primates'),
                     ('Mice', 'Rodents'), ('Squirrels', 'Rodents'), ('Beavers', 'Rodents'),
                     ('Crocodiles', 'Reptiles'), ('Komodo dragons', 'Reptiles'), ('Lizards', 'Reptiles'),
                     ('Coconut trees', 'Plants'), ('Grasses', 'Plants'), ('Oaks', 'Plants'),
                     ('Mushrooms', 'Fungi'), ('Molds', 'Fungi'), ('Yeasts', 'Fungi'),
                     ('Primates', 'Mammals'), ('Rodents', 'Mammals'), ('Rodents', 'Animals'),
                     ('Reptiles', 'Animals'), ('Mammals', 'Animals'), ('Animals', 'Multicellular organisms'),
                     ('Plants', 'Multicellular organisms'), ('Mushrooms', 'Multicellular organisms'),
                     ('Molds', 'Multicellular organisms'), ('Yeasts', 'Unicellular organisms')])


pos = nx.spring_layout(graph)

plt.figure(figsize=(15, 10))

nx.draw_networkx_nodes(graph, pos, node_size=1500, node_color='lightblue', alpha=0.8)
nx.draw_networkx_edges(graph, pos, width=1.5, alpha=0.5)
nx.draw_networkx_labels(graph, pos, font_size=10, font_weight='bold')


plt.title("Relationships")
plt.axis('off')
plt.show()