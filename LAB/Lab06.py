# -*- coding: utf-8 -*-
"""Lab06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zOwrqB32ICdCNM3Yeyn9bxvimC59GJH-
"""

#Exercise 1
def isPrime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def nextPrime(n):
    next_num = n + 1
    while True:
        if isPrime(next_num):
            return next_num
        next_num += 1

print(nextPrime(3))
print(nextPrime(8))
print(nextPrime(11))

#Exercise 2
def primeFact(p):
    factors = []
    divisor = 2

    while divisor <= p:
        if p % divisor == 0:
            factors.append(divisor)
            p = p // divisor
        else:
            divisor += 1

    return factors

print(primeFact(60))
print(primeFact(100))

#Exercise 3
def isPrime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def printPrime(N):
    primes = []
    for num in range(2, N):
        if isPrime(num):
            primes.append(num)
    print(primes)

printPrime(20)

#Exercise 4
def contestResult(n):
    if n < 2:
        return []
    else:
        O = [2]
        i = 3
        while i + 2 < n:
            flag = True
            j = 0
            while j < len(O):
                if i % O[j] == 0:
                    flag = False
                    break
                j += 1
            if flag:
                O.append(i)
            i += 2
        return O

print("n = 10:", contestResult(10))
print("n = 20:", contestResult(20))
print("n = 5:", contestResult(5))

#Exercise 5
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

print(gcd(24, 36))
print(gcd(81, 153))
print(gcd(17, 23))

#Exercise 6
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def lcm(a, b):
    return (a * b) // gcd(a, b)

print(lcm(24, 36))
print(lcm(81, 153))
print(lcm(17, 23))

#Exercise 7
def convertToBinary(n):
    binary = ""
    while n > 0:
        remainder = n % 2
        binary = str(remainder) + binary
        n = n // 2
    return binary


print(convertToBinary(5))
print(convertToBinary(15))
print(convertToBinary(6))

#Exercise 8
def convertFractionToBinary(n):
    binary = "0."
    while n > 0:
        n *= 2
        if n >= 1:
            binary += "1"
            n -= 1
        else:
            binary += "0"
    return binary

print(convertFractionToBinary(0.5))
print(convertFractionToBinary(0.25))
print(convertFractionToBinary(0.625))

#Exercsie 9
def convertToHexadecimal(n):
    hexadecimal = ""
    hex_digits = "0123456789ABCDEF"
    while n > 0:
        remainder = n % 16
        hexadecimal = hex_digits[remainder] + hexadecimal
        n = n // 16
    return hexadecimal

print(convertToHexadecimal(10))
print(convertToHexadecimal(15))
print(convertToHexadecimal(255))

#Exercsise 10
def convertBase(a, base1, base2):
    decimal = 0
    power = 0
    for digit in reversed(a):
        decimal += digit * (base1 ** power)
        power += 1

    converted = []
    while decimal > 0:
        remainder = decimal % base2
        converted.append(remainder)
        decimal = decimal // base2

    return list(reversed(converted))

print(convertBase([1, 1, 1], 10, 16))
print(convertBase([1, 0, 1], 2, 10))
print(convertBase([1, 2, 3], 4, 8))